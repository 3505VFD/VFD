// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Simple entering an integer into cell A1
        /// </summary>
        public void EnterValueIntoCell()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIItemWindow.UIFolderViewWindow.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICellContentTextBoxEdit = this.UINew1Window.UICellContentTextBoxWindow.UICellContentTextBoxEdit;
            WinButton uIEnterButton = this.UINew1Window.UIEnterWindow.UIEnterButton;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(41, 24));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(34, 8));

            // Type '32' in 'CellContentTextBox' text box
            uICellContentTextBoxEdit.Text = this.EnterValueIntoCellParams.UICellContentTextBoxEditText;

            // Click 'Enter' button
            Mouse.Click(uIEnterButton, new Point(21, 15));
        }
        
        /// <summary>
        /// Checks to see if the value box of the selected cell populates correctly
        /// </summary>
        public void ValueBoxOfCellEquality()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UINew1Window.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '32'
            Assert.AreEqual(this.ValueBoxOfCellEqualityExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Value in box is not what is expected");
        }
        
        /// <summary>
        /// Checks to see if the cell selected matches the cell name that populates in the cell name box.
        /// </summary>
        public void CheckCellNameBox()
        {
            #region Variable Declarations
            WinEdit uICellNameTextBoxEdit = this.UINew1Window.UICellNameTextBoxWindow.UICellNameTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellNameTextBox' text box equals 'A1'
            Assert.AreEqual(this.CheckCellNameBoxExpectedValues.UICellNameTextBoxEditText, uICellNameTextBoxEdit.Text, "Cell\'s name in box does not match the cell that is selected.");
        }
        
        /// <summary>
        /// Opens the spreadsheet application, then navigates the file meu and creates a new blank spreadsheet.
        /// </summary>
        public void OpenNewSpreadsheet()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UICodeMeterCCWindow.UIFolderViewWindow.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinMenuItem uINewSpreadsheetMenuItem = this.UINew1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewSpreadsheetMenuItem;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(39, 27));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(43, 14));

            // Click 'File' -> 'New Spreadsheet' menu item
            Mouse.Click(uINewSpreadsheetMenuItem, new Point(39, 8));
        }
        
        /// <summary>
        /// Compares the Form's text to make sure it matches that of a new Spreadsheet.
        /// </summary>
        public void HeaderMatchesNewSpreadsheet()
        {
            #region Variable Declarations
            WinTitleBar uINew1TitleBar = this.UINew1Window1.UINew1TitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'new1' title bar equals 'new1'
            Assert.AreEqual(this.HeaderMatchesNewSpreadsheetExpectedValues.UINew1TitleBarDisplayText, uINew1TitleBar.DisplayText, "Window header does not match that of a new spreadsheet.");
        }
        
        /// <summary>
        /// Creates a Spreadsheet, adds numbers to a couple of cells, saves the file, opens it from the desktop, and checks to see if the file was loaded properly.
        /// </summary>
        public void LoadSpreadsheetFromFile()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UICodeMeterCCWindow.UIFolderViewWindow.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinClient uISpreadsheetPanel1Client = this.UINew1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentTextBoxEdit = this.UINew1Window.UICellContentTextBoxWindow.UICellContentTextBoxEdit;
            WinButton uIEnterButton = this.UINew1Window.UIEnterWindow.UIEnterButton;
            WinMenuItem uIFileMenuItem = this.UINew1Window.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinMenuItem uISaveMenuItem = this.UINew1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinTreeItem uIDesktoppinnedTreeItem = this.UISaveAsWindow.UITreeViewWindow.UIQuickaccessTreeItem.UIDesktoppinnedTreeItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinMenuItem uIOpenMenuItem = this.UINew1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UILoadFromFileTestsprdListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(29, 41));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(21, 15));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(51, 118));

            // Type '21' in 'CellContentTextBox' text box
            uICellContentTextBoxEdit.Text = this.LoadSpreadsheetFromFileParams.UICellContentTextBoxEditText;

            // Click 'Enter' button
            Mouse.Click(uIEnterButton, new Point(12, 13));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(73, 199));

            // Type '22' in 'CellContentTextBox' text box
            uICellContentTextBoxEdit.Text = this.LoadSpreadsheetFromFileParams.UICellContentTextBoxEditText1;

            // Click 'Enter' button
            Mouse.Click(uIEnterButton, new Point(23, 13));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(17, 10));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(43, 9));

            // Click 'Quick access' -> 'Desktop (pinned)' tree item
            Mouse.Click(uIDesktoppinnedTreeItem, new Point(20, 5));

            // Select 'loadFromFileTest' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.LoadSpreadsheetFromFileParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(47, 15));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(45, 9));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(44, 11));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(45, 16));
        }
        
        /// <summary>
        /// Checks to see if filename that was opened matches the one that was saved.
        /// </summary>
        public void MatchingFilenameOpen()
        {
            #region Variable Declarations
            WinTitleBar uIChipsengutaheduhomeaTitleBar = this.UINew1Window.UIChipsengutaheduhomeaTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of '\\chips.eng.utah.edu\home\aschneid\.win_desktop\lo...' title bar contains 'loadFromFileTest.sprd'
            StringAssert.Contains(uIChipsengutaheduhomeaTitleBar.DisplayText, this.MatchingFilenameOpenExpectedValues.UIChipsengutaheduhomeaTitleBarDisplayText, "The correct file was not loaded properly.");
        }
        
        /// <summary>
        /// Opens a blank spreadsheet, modifies it, saves it, and re-opens it.
        /// </summary>
        public void SaveFile()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UICodeMeterCCWindow.UIFolderViewWindow.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICellContentTextBoxEdit = this.UINew1Window.UICellContentTextBoxWindow.UICellContentTextBoxEdit;
            WinButton uIEnterButton = this.UINew1Window.UIEnterWindow.UIEnterButton;
            WinMenuItem uISaveMenuItem = this.UINew1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uICloseButton = this.UINew1Window.UIChipsengutaheduhomeaTitleBar.UICloseButton;
            WinListItem uISpreadsheetGUIShortcListItem1 = this.UICodeMeterCCWindow.UIFolderViewWindow.UISpreadsheetGUIShortcListItem1;
            WinMenuItem uIOpenMenuItem = this.UINew1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UISaveFileTestsprdListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(31, 34));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(62, 14));

            // Type '21' in 'CellContentTextBox' text box
            uICellContentTextBoxEdit.Text = this.SaveFileParams.UICellContentTextBoxEditText;

            // Click 'Enter' button
            Mouse.Click(uIEnterButton, new Point(16, 8));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(44, 10));

            // Select 'saveFileTest' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveFileParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(24, 11));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 16));

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem1, new Point(48, 18));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(25, 12));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(59, 10));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(46, 9));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(32, 13));
        }
        
        /// <summary>
        /// Checks to see if cell A1's value populates the cell value box up top on open of the file.
        /// </summary>
        public void CheckCellValueBox()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UIChipsengutaheduhomeaWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '21'
            Assert.AreEqual(this.CheckCellValueBoxExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Cell value box does not match the selected cell after the re-open after a save.");

            // Verify that the 'ReadOnly' property of 'CellValueTextBox' text box equals 'True'
            Assert.AreEqual(this.CheckCellValueBoxExpectedValues.UICellValueTextBoxEditReadOnly, uICellValueTextBoxEdit.ReadOnly, "This box is not read only and it should be.");
        }
        
        /// <summary>
        /// Populates the cells that will be later checked for this test case.
        /// </summary>
        public void PopulateCellsToCheck()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UICodeMeterCCWindow.UIFolderViewWindow.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICellContentTextBoxEdit = this.UINew1Window.UICellContentTextBoxWindow.UICellContentTextBoxEdit;
            WinButton uIEnterButton = this.UINew1Window.UIEnterWindow.UIEnterButton;
            WinClient uISpreadsheetPanel1Client = this.UINew1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(22, 34));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(42, 5));

            // Type '22' in 'CellContentTextBox' text box
            uICellContentTextBoxEdit.Text = this.PopulateCellsToCheckParams.UICellContentTextBoxEditText;

            // Click 'Enter' button
            Mouse.Click(uIEnterButton, new Point(19, 7));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(162, 118));

            // Type '43' in 'CellContentTextBox' text box
            uICellContentTextBoxEdit.Text = this.PopulateCellsToCheckParams.UICellContentTextBoxEditText1;

            // Click 'Enter' button
            Mouse.Click(uIEnterButton, new Point(15, 8));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(322, 80));

            // Type '55' in 'CellContentTextBox' text box
            uICellContentTextBoxEdit.Text = this.PopulateCellsToCheckParams.UICellContentTextBoxEditText2;

            // Click 'Enter' button
            Mouse.Click(uIEnterButton, new Point(26, 6));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(59, 42));
        }
        
        /// <summary>
        /// Selects cell A1 and checks if the cell name and value boxes populate correctly.
        /// </summary>
        public void A1ProperNameAndValue()
        {
            #region Variable Declarations
            WinEdit uICellNameTextBoxEdit = this.UINew1Window.UICellNameTextBoxWindow.UICellNameTextBoxEdit;
            WinEdit uICellValueTextBoxEdit = this.UINew1Window.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellNameTextBox' text box equals 'A1'
            Assert.AreEqual(this.A1ProperNameAndValueExpectedValues.UICellNameTextBoxEditText, uICellNameTextBoxEdit.Text, "Cell name box does not match the text it should contain.");

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '22'
            Assert.AreEqual(this.A1ProperNameAndValueExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Value box does not show the proper value that the cell should have.");
        }
        
        /// <summary>
        /// Selects cell B5 in the spreadsheet panel.
        /// </summary>
        public void SelectCellB5()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINew1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(145, 119));
        }
        
        /// <summary>
        /// Checks the cell name and value boxes to see if they populated correctly.
        /// </summary>
        public void B5ProperNameAndValue()
        {
            #region Variable Declarations
            WinEdit uICellNameTextBoxEdit = this.UINew1Window.UICellNameTextBoxWindow.UICellNameTextBoxEdit;
            WinEdit uICellValueTextBoxEdit = this.UINew1Window.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellNameTextBox' text box equals 'B5'
            Assert.AreEqual(this.B5ProperNameAndValueExpectedValues.UICellNameTextBoxEditText, uICellNameTextBoxEdit.Text, "Cell name box does not match what it should be.");

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '43'
            Assert.AreEqual(this.B5ProperNameAndValueExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Cell value box does not have the value it should have.");
        }
        
        /// <summary>
        /// Selects cell D3 in the Spreadsheet panel.
        /// </summary>
        public void SelectCellD3()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINew1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(305, 82));
        }
        
        /// <summary>
        /// Checks to see if the name and value boxes populated correctly for cell D3.
        /// </summary>
        public void D3ProperNameAndValue()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UINew1Window.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinEdit uICellNameTextBoxEdit = this.UINew1Window.UICellNameTextBoxWindow.UICellNameTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '55'
            Assert.AreEqual(this.D3ProperNameAndValueExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Value in cell value box does not match what it should be.");

            // Verify that the 'Text' property of 'CellNameTextBox' text box equals 'D3'
            Assert.AreEqual(this.D3ProperNameAndValueExpectedValues.UICellNameTextBoxEditText, uICellNameTextBoxEdit.Text, "Cell name box does not contain the cell name that it should have.");
        }
        
        #region Properties
        public virtual EnterValueIntoCellParams EnterValueIntoCellParams
        {
            get
            {
                if ((this.mEnterValueIntoCellParams == null))
                {
                    this.mEnterValueIntoCellParams = new EnterValueIntoCellParams();
                }
                return this.mEnterValueIntoCellParams;
            }
        }
        
        public virtual ValueBoxOfCellEqualityExpectedValues ValueBoxOfCellEqualityExpectedValues
        {
            get
            {
                if ((this.mValueBoxOfCellEqualityExpectedValues == null))
                {
                    this.mValueBoxOfCellEqualityExpectedValues = new ValueBoxOfCellEqualityExpectedValues();
                }
                return this.mValueBoxOfCellEqualityExpectedValues;
            }
        }
        
        public virtual CheckCellNameBoxExpectedValues CheckCellNameBoxExpectedValues
        {
            get
            {
                if ((this.mCheckCellNameBoxExpectedValues == null))
                {
                    this.mCheckCellNameBoxExpectedValues = new CheckCellNameBoxExpectedValues();
                }
                return this.mCheckCellNameBoxExpectedValues;
            }
        }
        
        public virtual HeaderMatchesNewSpreadsheetExpectedValues HeaderMatchesNewSpreadsheetExpectedValues
        {
            get
            {
                if ((this.mHeaderMatchesNewSpreadsheetExpectedValues == null))
                {
                    this.mHeaderMatchesNewSpreadsheetExpectedValues = new HeaderMatchesNewSpreadsheetExpectedValues();
                }
                return this.mHeaderMatchesNewSpreadsheetExpectedValues;
            }
        }
        
        public virtual LoadSpreadsheetFromFileParams LoadSpreadsheetFromFileParams
        {
            get
            {
                if ((this.mLoadSpreadsheetFromFileParams == null))
                {
                    this.mLoadSpreadsheetFromFileParams = new LoadSpreadsheetFromFileParams();
                }
                return this.mLoadSpreadsheetFromFileParams;
            }
        }
        
        public virtual MatchingFilenameOpenExpectedValues MatchingFilenameOpenExpectedValues
        {
            get
            {
                if ((this.mMatchingFilenameOpenExpectedValues == null))
                {
                    this.mMatchingFilenameOpenExpectedValues = new MatchingFilenameOpenExpectedValues();
                }
                return this.mMatchingFilenameOpenExpectedValues;
            }
        }
        
        public virtual SaveFileParams SaveFileParams
        {
            get
            {
                if ((this.mSaveFileParams == null))
                {
                    this.mSaveFileParams = new SaveFileParams();
                }
                return this.mSaveFileParams;
            }
        }
        
        public virtual CheckCellValueBoxExpectedValues CheckCellValueBoxExpectedValues
        {
            get
            {
                if ((this.mCheckCellValueBoxExpectedValues == null))
                {
                    this.mCheckCellValueBoxExpectedValues = new CheckCellValueBoxExpectedValues();
                }
                return this.mCheckCellValueBoxExpectedValues;
            }
        }
        
        public virtual PopulateCellsToCheckParams PopulateCellsToCheckParams
        {
            get
            {
                if ((this.mPopulateCellsToCheckParams == null))
                {
                    this.mPopulateCellsToCheckParams = new PopulateCellsToCheckParams();
                }
                return this.mPopulateCellsToCheckParams;
            }
        }
        
        public virtual A1ProperNameAndValueExpectedValues A1ProperNameAndValueExpectedValues
        {
            get
            {
                if ((this.mA1ProperNameAndValueExpectedValues == null))
                {
                    this.mA1ProperNameAndValueExpectedValues = new A1ProperNameAndValueExpectedValues();
                }
                return this.mA1ProperNameAndValueExpectedValues;
            }
        }
        
        public virtual B5ProperNameAndValueExpectedValues B5ProperNameAndValueExpectedValues
        {
            get
            {
                if ((this.mB5ProperNameAndValueExpectedValues == null))
                {
                    this.mB5ProperNameAndValueExpectedValues = new B5ProperNameAndValueExpectedValues();
                }
                return this.mB5ProperNameAndValueExpectedValues;
            }
        }
        
        public virtual D3ProperNameAndValueExpectedValues D3ProperNameAndValueExpectedValues
        {
            get
            {
                if ((this.mD3ProperNameAndValueExpectedValues == null))
                {
                    this.mD3ProperNameAndValueExpectedValues = new D3ProperNameAndValueExpectedValues();
                }
                return this.mD3ProperNameAndValueExpectedValues;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenFileSecurityWarnWindow UIOpenFileSecurityWarnWindow
        {
            get
            {
                if ((this.mUIOpenFileSecurityWarnWindow == null))
                {
                    this.mUIOpenFileSecurityWarnWindow = new UIOpenFileSecurityWarnWindow();
                }
                return this.mUIOpenFileSecurityWarnWindow;
            }
        }
        
        public UINew1Window UINew1Window
        {
            get
            {
                if ((this.mUINew1Window == null))
                {
                    this.mUINew1Window = new UINew1Window();
                }
                return this.mUINew1Window;
            }
        }
        
        public UICodeMeterCCWindow UICodeMeterCCWindow
        {
            get
            {
                if ((this.mUICodeMeterCCWindow == null))
                {
                    this.mUICodeMeterCCWindow = new UICodeMeterCCWindow();
                }
                return this.mUICodeMeterCCWindow;
            }
        }
        
        public UINew1Window1 UINew1Window1
        {
            get
            {
                if ((this.mUINew1Window1 == null))
                {
                    this.mUINew1Window1 = new UINew1Window1();
                }
                return this.mUINew1Window1;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIOpenWindow2 UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow2();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIChipsengutaheduhomeaWindow UIChipsengutaheduhomeaWindow
        {
            get
            {
                if ((this.mUIChipsengutaheduhomeaWindow == null))
                {
                    this.mUIChipsengutaheduhomeaWindow = new UIChipsengutaheduhomeaWindow();
                }
                return this.mUIChipsengutaheduhomeaWindow;
            }
        }
        #endregion
        
        #region Fields
        private EnterValueIntoCellParams mEnterValueIntoCellParams;
        
        private ValueBoxOfCellEqualityExpectedValues mValueBoxOfCellEqualityExpectedValues;
        
        private CheckCellNameBoxExpectedValues mCheckCellNameBoxExpectedValues;
        
        private HeaderMatchesNewSpreadsheetExpectedValues mHeaderMatchesNewSpreadsheetExpectedValues;
        
        private LoadSpreadsheetFromFileParams mLoadSpreadsheetFromFileParams;
        
        private MatchingFilenameOpenExpectedValues mMatchingFilenameOpenExpectedValues;
        
        private SaveFileParams mSaveFileParams;
        
        private CheckCellValueBoxExpectedValues mCheckCellValueBoxExpectedValues;
        
        private PopulateCellsToCheckParams mPopulateCellsToCheckParams;
        
        private A1ProperNameAndValueExpectedValues mA1ProperNameAndValueExpectedValues;
        
        private B5ProperNameAndValueExpectedValues mB5ProperNameAndValueExpectedValues;
        
        private D3ProperNameAndValueExpectedValues mD3ProperNameAndValueExpectedValues;
        
        private UIItemWindow mUIItemWindow;
        
        private UIOpenFileSecurityWarnWindow mUIOpenFileSecurityWarnWindow;
        
        private UINew1Window mUINew1Window;
        
        private UICodeMeterCCWindow mUICodeMeterCCWindow;
        
        private UINew1Window1 mUINew1Window1;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIOpenWindow2 mUIOpenWindow;
        
        private UIChipsengutaheduhomeaWindow mUIChipsengutaheduhomeaWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnterValueIntoCell'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EnterValueIntoCellParams
    {
        
        #region Fields
        /// <summary>
        /// Type '32' in 'CellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditText = "32";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValueBoxOfCellEquality'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueBoxOfCellEqualityExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '32'
        /// </summary>
        public string UICellValueTextBoxEditText = "32";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCellNameBox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCellNameBoxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameTextBox' text box equals 'A1'
        /// </summary>
        public string UICellNameTextBoxEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HeaderMatchesNewSpreadsheet'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HeaderMatchesNewSpreadsheetExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'new1' title bar equals 'new1'
        /// </summary>
        public string UINew1TitleBarDisplayText = "new1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoadSpreadsheetFromFile'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LoadSpreadsheetFromFileParams
    {
        
        #region Fields
        /// <summary>
        /// Type '21' in 'CellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditText = "21";
        
        /// <summary>
        /// Type '22' in 'CellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditText1 = "22";
        
        /// <summary>
        /// Select 'loadFromFileTest' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "loadFromFileTest";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MatchingFilenameOpen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MatchingFilenameOpenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '\\chips.eng.utah.edu\home\aschneid\.win_desktop\lo...' title bar contains 'loadFromFileTest.sprd'
        /// </summary>
        public string UIChipsengutaheduhomeaTitleBarDisplayText = "loadFromFileTest.sprd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveFile'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SaveFileParams
    {
        
        #region Fields
        /// <summary>
        /// Type '21' in 'CellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditText = "21";
        
        /// <summary>
        /// Select 'saveFileTest' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "saveFileTest";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckCellValueBox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckCellValueBoxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '21'
        /// </summary>
        public string UICellValueTextBoxEditText = "21";
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of 'CellValueTextBox' text box equals 'True'
        /// </summary>
        public bool UICellValueTextBoxEditReadOnly = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PopulateCellsToCheck'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PopulateCellsToCheckParams
    {
        
        #region Fields
        /// <summary>
        /// Type '22' in 'CellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditText = "22";
        
        /// <summary>
        /// Type '43' in 'CellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditText1 = "43";
        
        /// <summary>
        /// Type '55' in 'CellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditText2 = "55";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'A1ProperNameAndValue'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class A1ProperNameAndValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameTextBox' text box equals 'A1'
        /// </summary>
        public string UICellNameTextBoxEditText = "A1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '22'
        /// </summary>
        public string UICellValueTextBoxEditText = "22";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'B5ProperNameAndValue'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class B5ProperNameAndValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameTextBox' text box equals 'B5'
        /// </summary>
        public string UICellNameTextBoxEditText = "B5";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '43'
        /// </summary>
        public string UICellValueTextBoxEditText = "43";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'D3ProperNameAndValue'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class D3ProperNameAndValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '55'
        /// </summary>
        public string UICellValueTextBoxEditText = "55";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameTextBox' text box equals 'D3'
        /// </summary>
        public string UICellNameTextBoxEditText = "D3";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIFolderViewWindow mUIFolderViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIShortcListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIShortcListItem == null))
                {
                    this.mUISpreadsheetGUIShortcListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIShortcListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI - Shortcut";
                    #endregion
                }
                return this.mUISpreadsheetGUIShortcListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIShortcListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenFileSecurityWarnWindow : WinWindow
    {
        
        public UIOpenFileSecurityWarnWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open File - Security Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4426";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open File - Security Warning");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINew1Window : WinWindow
    {
        
        public UINew1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "new1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("new1");
            this.WindowTitles.Add("new1*");
            this.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\aschneid\\.win_desktop\\loadFromFileTest.sprd");
            #endregion
        }
        
        #region Properties
        public UICellContentTextBoxWindow UICellContentTextBoxWindow
        {
            get
            {
                if ((this.mUICellContentTextBoxWindow == null))
                {
                    this.mUICellContentTextBoxWindow = new UICellContentTextBoxWindow(this);
                }
                return this.mUICellContentTextBoxWindow;
            }
        }
        
        public UIEnterWindow UIEnterWindow
        {
            get
            {
                if ((this.mUIEnterWindow == null))
                {
                    this.mUIEnterWindow = new UIEnterWindow(this);
                }
                return this.mUIEnterWindow;
            }
        }
        
        public UICellValueTextBoxWindow UICellValueTextBoxWindow
        {
            get
            {
                if ((this.mUICellValueTextBoxWindow == null))
                {
                    this.mUICellValueTextBoxWindow = new UICellValueTextBoxWindow(this);
                }
                return this.mUICellValueTextBoxWindow;
            }
        }
        
        public UICellNameTextBoxWindow UICellNameTextBoxWindow
        {
            get
            {
                if ((this.mUICellNameTextBoxWindow == null))
                {
                    this.mUICellNameTextBoxWindow = new UICellNameTextBoxWindow(this);
                }
                return this.mUICellNameTextBoxWindow;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIChipsengutaheduhomeaTitleBar UIChipsengutaheduhomeaTitleBar
        {
            get
            {
                if ((this.mUIChipsengutaheduhomeaTitleBar == null))
                {
                    this.mUIChipsengutaheduhomeaTitleBar = new UIChipsengutaheduhomeaTitleBar(this);
                }
                return this.mUIChipsengutaheduhomeaTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UICellContentTextBoxWindow mUICellContentTextBoxWindow;
        
        private UIEnterWindow mUIEnterWindow;
        
        private UICellValueTextBoxWindow mUICellValueTextBoxWindow;
        
        private UICellNameTextBoxWindow mUICellNameTextBoxWindow;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIChipsengutaheduhomeaTitleBar mUIChipsengutaheduhomeaTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellContentTextBoxWindow : WinWindow
    {
        
        public UICellContentTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellContentTextBox";
            this.WindowTitles.Add("new1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentTextBoxEdit
        {
            get
            {
                if ((this.mUICellContentTextBoxEdit == null))
                {
                    this.mUICellContentTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Input:";
                    this.mUICellContentTextBoxEdit.WindowTitles.Add("new1");
                    #endregion
                }
                return this.mUICellContentTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEnterWindow : WinWindow
    {
        
        public UIEnterWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ContentChangeButton";
            this.WindowTitles.Add("new1");
            #endregion
        }
        
        #region Properties
        public WinButton UIEnterButton
        {
            get
            {
                if ((this.mUIEnterButton == null))
                {
                    this.mUIEnterButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEnterButton.SearchProperties[WinButton.PropertyNames.Name] = "Enter";
                    this.mUIEnterButton.WindowTitles.Add("new1");
                    #endregion
                }
                return this.mUIEnterButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEnterButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellValueTextBoxWindow : WinWindow
    {
        
        public UICellValueTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellValueTextBox";
            this.WindowTitles.Add("new1*");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueTextBoxEdit
        {
            get
            {
                if ((this.mUICellValueTextBoxEdit == null))
                {
                    this.mUICellValueTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueTextBoxEdit.WindowTitles.Add("new1*");
                    #endregion
                }
                return this.mUICellValueTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellNameTextBoxWindow : WinWindow
    {
        
        public UICellNameTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellNameTextBox";
            this.WindowTitles.Add("new1*");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameTextBoxEdit
        {
            get
            {
                if ((this.mUICellNameTextBoxEdit == null))
                {
                    this.mUICellNameTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameTextBoxEdit.WindowTitles.Add("new1*");
                    #endregion
                }
                return this.mUICellNameTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("new1");
            this.WindowTitles.Add("new1*");
            this.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\aschneid\\.win_desktop\\loadFromFileTest.sprd");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("new1");
            this.WindowTitles.Add("new1*");
            this.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\aschneid\\.win_desktop\\loadFromFileTest.sprd");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewSpreadsheetMenuItem
        {
            get
            {
                if ((this.mUINewSpreadsheetMenuItem == null))
                {
                    this.mUINewSpreadsheetMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewSpreadsheetMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New Spreadsheet";
                    this.mUINewSpreadsheetMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewSpreadsheetMenuItem.WindowTitles.Add("new1");
                    #endregion
                }
                return this.mUINewSpreadsheetMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("new1*");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\aschneid\\.win_desktop\\loadFromFileTest.sprd");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewSpreadsheetMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("new1");
            this.WindowTitles.Add("new1*");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("new1");
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("new1*");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIChipsengutaheduhomeaTitleBar : WinTitleBar
    {
        
        public UIChipsengutaheduhomeaTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\aschneid\\.win_desktop\\loadFromFileTest.sprd");
            this.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\aschneid\\.win_desktop\\saveFileTest.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\aschneid\\.win_desktop\\saveFileTest.sprd");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICodeMeterCCWindow : WinWindow
    {
        
        public UICodeMeterCCWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "CodeMeterCC";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            this.WindowTitles.Add("CodeMeterCC");
            #endregion
        }
        
        #region Properties
        public UIFolderViewWindow1 UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow1(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIFolderViewWindow1 mUIFolderViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFolderViewWindow1 : WinWindow
    {
        
        public UIFolderViewWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("CodeMeterCC");
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIShortcListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIShortcListItem == null))
                {
                    this.mUISpreadsheetGUIShortcListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIShortcListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI - Shortcut";
                    this.mUISpreadsheetGUIShortcListItem.WindowTitles.Add("CodeMeterCC");
                    #endregion
                }
                return this.mUISpreadsheetGUIShortcListItem;
            }
        }
        
        public WinListItem UISpreadsheetGUIShortcListItem1
        {
            get
            {
                if ((this.mUISpreadsheetGUIShortcListItem1 == null))
                {
                    this.mUISpreadsheetGUIShortcListItem1 = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIShortcListItem1.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI - Shortcut";
                    this.mUISpreadsheetGUIShortcListItem1.WindowTitles.Add("CodeMeterCC");
                    #endregion
                }
                return this.mUISpreadsheetGUIShortcListItem1;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIShortcListItem;
        
        private WinListItem mUISpreadsheetGUIShortcListItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINew1Window1 : WinWindow
    {
        
        public UINew1Window1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "new1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("new1");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UINew1TitleBar
        {
            get
            {
                if ((this.mUINew1TitleBar == null))
                {
                    this.mUINew1TitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUINew1TitleBar.WindowTitles.Add("new1");
                    #endregion
                }
                return this.mUINew1TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUINew1TitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIQuickaccessTreeItem UIQuickaccessTreeItem
        {
            get
            {
                if ((this.mUIQuickaccessTreeItem == null))
                {
                    this.mUIQuickaccessTreeItem = new UIQuickaccessTreeItem(this);
                }
                return this.mUIQuickaccessTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIQuickaccessTreeItem mUIQuickaccessTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIQuickaccessTreeItem : WinTreeItem
    {
        
        public UIQuickaccessTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Quick access";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDesktoppinnedTreeItem
        {
            get
            {
                if ((this.mUIDesktoppinnedTreeItem == null))
                {
                    this.mUIDesktoppinnedTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDesktoppinnedTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop (pinned)";
                    this.mUIDesktoppinnedTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDesktoppinnedTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDesktoppinnedTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDesktoppinnedTreeItem.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIDesktoppinnedTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDesktoppinnedTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow2 : WinWindow
    {
        
        public UIOpenWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UILoadFromFileTestsprdListItem UILoadFromFileTestsprdListItem
        {
            get
            {
                if ((this.mUILoadFromFileTestsprdListItem == null))
                {
                    this.mUILoadFromFileTestsprdListItem = new UILoadFromFileTestsprdListItem(this);
                }
                return this.mUILoadFromFileTestsprdListItem;
            }
        }
        
        public UISaveFileTestsprdListItem UISaveFileTestsprdListItem
        {
            get
            {
                if ((this.mUISaveFileTestsprdListItem == null))
                {
                    this.mUISaveFileTestsprdListItem = new UISaveFileTestsprdListItem(this);
                }
                return this.mUISaveFileTestsprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UILoadFromFileTestsprdListItem mUILoadFromFileTestsprdListItem;
        
        private UISaveFileTestsprdListItem mUISaveFileTestsprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILoadFromFileTestsprdListItem : WinListItem
    {
        
        public UILoadFromFileTestsprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "loadFromFileTest.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveFileTestsprdListItem : WinListItem
    {
        
        public UISaveFileTestsprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "saveFileTest.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIChipsengutaheduhomeaWindow : WinWindow
    {
        
        public UIChipsengutaheduhomeaWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "\\\\chips.eng.utah.edu\\home\\aschneid\\.win_desktop\\saveFileTest.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\aschneid\\.win_desktop\\saveFileTest.sprd");
            #endregion
        }
        
        #region Properties
        public UICellValueTextBoxWindow1 UICellValueTextBoxWindow
        {
            get
            {
                if ((this.mUICellValueTextBoxWindow == null))
                {
                    this.mUICellValueTextBoxWindow = new UICellValueTextBoxWindow1(this);
                }
                return this.mUICellValueTextBoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICellValueTextBoxWindow1 mUICellValueTextBoxWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellValueTextBoxWindow1 : WinWindow
    {
        
        public UICellValueTextBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellValueTextBox";
            this.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\aschneid\\.win_desktop\\saveFileTest.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueTextBoxEdit
        {
            get
            {
                if ((this.mUICellValueTextBoxEdit == null))
                {
                    this.mUICellValueTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueTextBoxEdit.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\aschneid\\.win_desktop\\saveFileTest.sprd");
                    #endregion
                }
                return this.mUICellValueTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueTextBoxEdit;
        #endregion
    }
}
